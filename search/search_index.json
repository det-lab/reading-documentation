{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>If you've ever installed a library, tried out a new tool, or searched for help online, you've likely run into technical documentation. Sometimes it's wonderfully clear, while other times it may feel like a maze of jargon and missing context. Being able to navigate and understand technical documentation is one of the most valuable skills you can build; whether you're writing code, configuring a system, or just trying to understand how something works.</p> <p>Documentation is where you learn how to install something, what each function or option means, and how to use it effectively. Instead of memorizing commands or copying from tutorials, good documentation lets you explore on your own, adapt examples to your needs, and solve real world problems confidently and effectively.</p> <p>This lesson will help you learn how to read documentation with purpose. We'll break down how to recognize placeholders, how to troubleshoot issues you run into, and how to understand the basic structure of good documentation and use it effectively.</p> <p>Let's get started. Click here to continue on to the next section where we will go over the typical components of technical documentation.</p>"},{"location":"01_placeholders/","title":"Placeholder Text","text":"<p>Documentation frequently uses placeholder text to show where you need to enter something specific to your system. These are not meant to be copied literally, instead existing to notify you not to do that. If you treat placeholders as fixed text, or don't read the documentation close enough to notice when a placeholder is being used, commands will often fail or behave in unexpected ways. </p> <p>Here are some common examples of placeholders:</p> <ul> <li> <p><code>&lt;your-username&gt;</code></p> </li> <li> <p><code>[path/to/your/file]</code></p> </li> <li> <p><code>example.com</code></p> </li> <li> <p><code>my-project</code></p> </li> <li> <p><code>REPLACE_ME</code></p> </li> </ul> <p>An important thing to pay attention to regarding placeholder text is the surrounding punctuation. Placeholders are often surrounded by square, curly, or angle brackets (<code>[]</code>, <code>{}</code>, <code>&lt;&gt;</code>) to make the part you need to replace more noticeable. You're usually not supposed to include the brackets when you enter your own value.</p>"},{"location":"01_placeholders/#how-to-recognize-a-placeholder","title":"How to Recognize a Placeholder","text":"<p>If you're unsure whether something is a placeholder:</p> <ul> <li> <p>Ask: \"Is this value likely to change depending on who's using it or where it's run?\"</p> </li> <li> <p>Is it generic, vague, or labeled as \"your-\", \"my-\", or \"example-\"?</p> </li> <li> <p>Is it in a context where you'd normally enter personal/system specific info (e.g. usernames, file paths, URLs, keys)?</p> </li> </ul> <p>Sometime the docs won't use any special punctuation at all, just words like <code>myproject</code>, <code>your_site</code>, or <code>localhost</code>. Be alert for these even if they look like real values.</p>"},{"location":"01_placeholders/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Scan the entire command before copying it. Identify which parts might need replacing.</p> </li> <li> <p>Don't include the punctuation unless the doc says to (or if the brackets are required syntax in that language).</p> </li> <li> <p>Check multiple examples. Sometimes a later example clarifies what an earlier placeholder meant.</p> </li> <li> <p>When in doubt, try it with a safe value and see how the system responds.</p> </li> </ul>"},{"location":"02_follow_steps/","title":"Follow Every Step","text":"<p>One of the most common sources of frustration when working through technical documentation is skipping a step, intentionally or not. Many commands and configuration instructions rely on prior steps being completed exactly as written. A missing flag, a misread instruction, or a skipped environment setup can cause errors that are difficult to trace back to their cause.</p> <p>When you're following documentation, be sure to read each step in full before acting. Don't just copy and paste blocks of code without understanding the context or prerequisites.</p> <p>Sometimes, a step looks trivial or like something you've done before, but includes a small variation that makes it essential. For example, when installing the Windows Subsystem for Linux (WSL), the instructions include the line:</p> <p>\"Run Powershell as Administrator\"</p> <p>If you skip that and open a normal Powershell window, several of the next steps will silently fail or produce errors, and it may not be obvious that the problem was your permissions when you go to troubleshoot them. The documentation assumes you followed every step, so if you didn't, the help it provides may no longer apply. </p> <p>This kind of detail - how a program is run, which directory you're in, whether a file has been downloaded yet - is often where beginner mistakes happen. Always check for:</p> <ul> <li> <p>Role or permissions requirements (e.g., \"run as root\", or \"use an admin shell\")</p> </li> <li> <p>Environment setup (e.g., \"ensure Python 3.10+ is installed\")</p> </li> <li> <p>Context switches (e.g., \"now open a Linux terminal\" after installing WSL)</p> </li> </ul> <p>Skipping a step doesn't always cause an immediate error. Sometimes it causes a later step to break in a way that can be hard to diagnose. Even worse, if you're working on something with many interdependent steps, you might spend hours debugging something that's actually caused by a skipped or altered instruction from the very beginning.</p>"}]}