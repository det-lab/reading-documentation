{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>If you've ever installed a library, tried out a new tool, or searched for help online, you've likely run into technical documentation. Sometimes it's wonderfully clear, while other times it may feel like a maze of jargon and missing context. Being able to navigate and understand technical documentation is one of the most valuable skills you can build; whether you're writing code, configuring a system, or just trying to understand how something works.</p> <p>This lesson will help you learn how to read documentation with purpose. We'll break down how to recognize placeholders, how to troubleshoot issues you run into, and how to understand the basic structure of good documentation and use it effectively.</p> <p>Let's get started. Click here to continue on to the next section where we will go over one of the most common components of technical documentation: placeholders.</p>"},{"location":"01_placeholders/","title":"Placeholder Text","text":"<p>Documentation frequently uses placeholder text to show where you need to enter something specific to your system. These are not meant to be copied literally, instead existing to notify you not to do that. If you treat placeholders as fixed text, or don't read the documentation close enough to notice when a placeholder is being used, commands will often fail or behave in unexpected ways. </p> <p>Here are some common examples of placeholders:</p> <ul> <li> <p><code>&lt;your-username&gt;</code></p> </li> <li> <p><code>[path/to/your/file]</code></p> </li> <li> <p><code>example.com</code></p> </li> <li> <p><code>my-project</code></p> </li> <li> <p><code>REPLACE_ME</code></p> </li> </ul> <p>An important thing to pay attention to regarding placeholder text is the surrounding punctuation. Placeholders are often surrounded by square, curly, or angle brackets (<code>[]</code>, <code>{}</code>, <code>&lt;&gt;</code>) to make the part you need to replace more noticeable. You're not supposed to include the brackets when you enter your own value.</p>"},{"location":"01_placeholders/#how-to-recognize-a-placeholder","title":"How to Recognize a Placeholder","text":"<p>If you're unsure whether something is a placeholder:</p> <ul> <li> <p>Ask: \"Is this value likely to change depending on who's using it or where it's run?\"</p> </li> <li> <p>Is it generic, vague, or labeled as \"your-\", \"my-\", or \"example-\"?</p> </li> <li> <p>Is it in a context where you'd normally enter personal/system specific info (e.g. usernames, file paths, URLs, keys)?</p> </li> </ul> <p>Sometime the docs won't use any special punctuation at all, just words like <code>myproject</code>, <code>your_site</code>, or <code>localhost</code>. Be alert for these even if they look like real values.</p>"},{"location":"01_placeholders/#example-placeholders","title":"Example Placeholders","text":"<p>Take a look at this Docker SSH tutorial and see if you can find all of the lines which use placeholder text.</p> Answer <p> <pre><code>mkdir example-ssh-container\ncd example-ssh-container\n</code></pre> <pre><code>RUN mkdir /var/run/sshd &amp;&amp; echo 'root:&lt;your-new-password&gt;' | chpasswd\n</code></pre> <pre><code>docker build -t example-ssh-container .\n</code></pre> <pre><code>docker run -d -p 2222:22 --name ssh-container example-ssh-container\n</code></pre> </p> <p>Now let's take a look at this SSH key generation guide. Try and find all of the lines between the sections Generate an SSH key pair and Add an SSH key to your GitLab account which contain placeholder text.</p> Answer <p> <pre><code>ssh-keygen -t ed25519 -C \"&lt;comment&gt;\"\n</code></pre> <pre><code>ssh-keygen -t rsa -b 2048 -C \"&lt;comment&gt;\"\n</code></pre> <pre><code>ssh-add &lt;directory to private SSH key&gt;\n</code></pre> <pre><code># GitLab.com\nHost gitlab.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/gitlab_com_rsa\n\n# Private GitLab instance\nHost gitlab.company.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/example_com_rsa\n</code></pre>   **gitlab_com_rsa**, **gitlab.company.com**, and **example_com_rsa** are all placeholder text. In this case, the placeholder text is not set off with any kind of brackets which can make it particularly hard to notice.  </p> <p>Try and find all the placeholder text from this guide for Getting Started - First-Time Git Setup.</p> Answer <p> <pre><code>[path]/etc/gitconfig\n</code></pre> <pre><code>$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n</code></pre> <pre><code>$ git config --global init.defaultBranch main\n</code></pre> <pre><code>$ git config --list\nuser.name=John Doe\nuser.email=johndoe@example.com\n</code></pre> </p>"},{"location":"01_placeholders/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Scan the entire command before copying it. Identify which parts might need replacing.</p> </li> <li> <p>Don't include the punctuation unless the doc says to (or if the brackets are required syntax in that language).</p> </li> <li> <p>Check multiple examples. Sometimes a later example clarifies what an earlier placeholder meant.</p> </li> <li> <p>When in doubt, try it with a safe value and see how the system responds.</p> </li> </ul> <p>Now that you\u2019re comfortable identifying and understanding placeholders, it\u2019s time to explore how to move forward confidently with the next steps when working through documentation. Click here to continue to the next section where we will go over best practices for following steps.</p>"},{"location":"02_follow_steps/","title":"Follow Every Step","text":"<p>One of the most common sources of frustration when working through technical documentation is skipping a step, intentionally or not. Many commands and configuration instructions rely on prior steps being completed exactly as written. A missing flag, a misread instruction, or a skipped environment setup can cause errors that are difficult to trace back to their cause.</p> <p>When you're following documentation, be sure to read each step in full before acting. Don't just copy and paste blocks of code without understanding the context or prerequisites.</p> <p>Sometimes, a step looks trivial or like something you've done before, but includes a small variation that makes it essential. For example, when installing the Windows Subsystem for Linux (WSL), the instructions include the line:</p> <p>Open PowerShell in administrator mode by right-clicking and selecting \"Run as administrator\"</p> <p>If you skip that and open a normal Powershell window, several of the next steps will silently fail or produce errors, and it may not be obvious that the problem was your permissions when you go to troubleshoot them. The documentation assumes you followed every step, so if you didn't, the help it provides may no longer apply. </p> <p>This kind of detail - how a program is run, which directory you're in, whether a file has been downloaded yet - is often where mistakes happen. Always check for:</p> <ul> <li> <p>Role or permissions requirements (e.g., \"run as root\", or \"use an admin shell\")</p> </li> <li> <p>Environment setup (e.g., \"ensure Python 3.10+ is installed\")</p> </li> <li> <p>Context switches (e.g., \"now open a Linux terminal\" after installing WSL)</p> </li> </ul> <p>Skipping a step doesn't always cause an immediate error. Sometimes it causes a later step to break in a way that can be hard to diagnose. Even worse, if you're working on something with many interdependent steps, you might spend hours debugging something that's actually caused by a skipped or altered instruction from the very beginning.</p> <p>Even with clear guidance, issues can still arise, so let\u2019s dive into how to handle problems that you might encounter. Click here to continue to the next section where we will go over best practices for troubleshooting using documentation.</p>"},{"location":"03_troubleshooting/","title":"When Something Doesn't Work: Troubleshooting with Documentation","text":"<p>Even if you follow the documentation closely, it is still possible to run into errors. This doesn't necessarily mean that the documentation is inadequate or that you made a mistake, but figuring out what went wrong in these situations means approaching the error systematically.</p> <p>Documentation can be treated much like a map: retrace your steps, look for landmarks you missed, and read carefully for assumptions or conditions that might not have applied to you.</p>"},{"location":"03_troubleshooting/#revisit-the-instructions","title":"Revisit the Instructions","text":"<p>When things go wrong, go back to the beginning of the documentation and ask:</p> <ul> <li> <p>Did I really complete each step? Look for things that didn't give feedback; maybe they failed silently.</p> </li> <li> <p>Was I in the right environment? For example, in the correct folder, using the correct version of Python, etc.</p> </li> <li> <p>Did I skip any prerequisites, notes, or special instructions? Check for things like \"if you're on macOS...\", \"requires admin privileges,\" or \"restart your shell after installing...\"</p> </li> </ul> <p>Reading documentation thoroughly often means re-reading it. Especially with long installation or setup processes, going back to the very beginning can often reveal what's missing.</p>"},{"location":"03_troubleshooting/#identify-an-error","title":"Identify an Error","text":"<p>If an error message appears, the best option isn't always to just copy and paste it into a search engine. Instead, sometimes try:</p> <ul> <li> <p>Reading the full error message. It can often include the filename, line number, or command that failed.</p> </li> <li> <p>Look at what the command was doing.</p> </li> <li> <p>Compare your input to the example. Did you replace placeholders correctly? Were any arguments left out?</p> </li> </ul> <p>Sometimes the error isn't in the line that failed, but instead a result of a previous step having left things in an incorrect state. </p>"},{"location":"03_troubleshooting/#look-for-context-in-the-documentation","title":"Look for Context in the Documentation","text":"<p>Good documentation often includes sections for:</p> <ul> <li> <p>Common errors or known issues</p> </li> <li> <p>Platform specific notes</p> </li> <li> <p>Version compatibility warnings</p> </li> <li> <p>Optional steps that become required in certain cases</p> </li> </ul> <p>For example, the <code>conda</code> package manager has multiple steps for installing packages and configuring environments. If a package fails to install, it can often be because the channel wasn't added or the environment wasn't activated. Both are steps that look optional until something breaks.</p> <p>If the documentation includes a troubleshooting or FAQ section, go there immediately. They're written precisely for moments like this.</p>"},{"location":"03_troubleshooting/#gather-evidence-and-context-before-seeking-help","title":"Gather Evidence and Context Before Seeking Help","text":"<p>If you've checked the documentation and you're still stuck, it's time to look elsewhere. To do that efficiently:</p> <ul> <li>Search with context. Include tool names and versions when searching for errors.</li> </ul> <p>Instead of <code>ModuleNotFoundError</code>, try <code>pandas ModuleNotFoundError Python 3.11 virtualenv</code></p> <ul> <li>Be ready to explain what you've tried. If you post on a forum or ask a mentor, include the commands you ran, the error you got, and the part of the documentation you were following. </li> </ul>"},{"location":"03_troubleshooting/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Reread the documentation with fresh eyes when something fails.</p> </li> <li> <p>Trust that most errors are solvable with careful review and patience.</p> </li> <li> <p>Reach out to a human mentor if at all possible. </p> </li> </ul> <p>With troubleshooting strategies in hand, it\u2019s helpful to take a step back and familiarize yourself with the overall structure of good documentation to better navigate and utilize it. Click here to continue to the next section where we will go over some standard components of technical documentation.</p>"},{"location":"04_basic_structure/","title":"Understanding the Basic Structure of Good Documentation","text":"<p>While documentation can vary in tone, format, and complexity depending on the project or tool, most good documentation shares a common structure. Recognizing these sections and understanding their purpose can help you quickly find what you need and make sense of unfamiliar tools.</p> <p>Here are the most common components you're likely to encounter:</p>"},{"location":"04_basic_structure/#introduction-or-overview","title":"Introduction or Overview","text":"<p>This section gives you a high-level understanding of what the tool or library does. It usually includes:</p> <ul> <li> <p>A short description of its purpose</p> </li> <li> <p>Key features or benefits</p> </li> <li> <p>Context about when or why you'd use it</p> </li> </ul> <p>If you're deciding whether a tool is right for your project, this is the place to start.</p>"},{"location":"04_basic_structure/#installation-instructions","title":"Installation Instructions","text":"<p>This is often one of the first sections you'll look for when getting started. It typically includes:</p> <ul> <li> <p>System or language requirements</p> </li> <li> <p>Step-by-step setup commands (such as <code>pip install ...</code>)</p> </li> <li> <p>Configuration tips or prerequisites</p> </li> </ul> <p>Clear installation docs help ensure you can get the tool up and running without unnecessary roadblocks.</p>"},{"location":"04_basic_structure/#getting-started-or-quick-start-guide","title":"Getting Started or Quick Start Guide","text":"<p>This section offers a minimal working example to help you see the tool in action. It's designed to:</p> <ul> <li> <p>Show a basic use case with as little setup as possible</p> </li> <li> <p>Let you test that everything is working correctly</p> </li> <li> <p>Help you build early confidence in using the tool</p> </li> </ul> <p>Quick starts are especially helpful when you're new to the tool and just want to see how it behaves.</p>"},{"location":"04_basic_structure/#usage-and-examples","title":"Usage and Examples","text":"<p>Here, you'll find more detailed instructions on how to use the tool, often with:</p> <ul> <li> <p>Common code patterns or workflows</p> </li> <li> <p>Explanations of options or parameters</p> </li> <li> <p>Sample input and output</p> </li> </ul> <p>This section helps you move beyond copy-pasting and start adapting examples to your own needs.</p>"},{"location":"04_basic_structure/#function-reference","title":"Function Reference","text":"<p>This is the technical heart of most documentation. It's usually more formal and structured, covering:</p> <ul> <li> <p>The inputs </p> </li> <li> <p>The outputs</p> </li> <li> <p>Example usage</p> </li> </ul> <p>This is where you'll go when you need specifics about how something works.</p> <p>Take a look at the documentation for numpy's arange which lists the parameters, returns, and examples.</p>"},{"location":"04_basic_structure/#troubleshooting-or-faq","title":"Troubleshooting or FAQ","text":"<p>Things don't always work the first time. Good documentation includes:</p> <ul> <li> <p>Common problems and their fixes</p> </li> <li> <p>Clarifications on confusing behavior</p> </li> <li> <p>Links to support or community resources</p> </li> </ul> <p>This section can save you hours of frustration.</p>"},{"location":"04_basic_structure/#glossaryterminology","title":"Glossary/Terminology","text":"<p>For more complex or domain-specific tools, a glossary helps explain jargon or concepts the documentation relies on. Don't skip this. Knowing what a term means can unlock the rest of the documentation.</p> <p>By learning to identify these sections, you'll be better equipped to scan documentation quickly, understand the scope of a tool, and locate the exact information you need, whether you're just getting started or debugging a complex issue.</p>"}]}